{"version":3,"sources":["Components/Formulario.js","Components/Cita.js","App.js","serviceWorker.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","actualizarCita","error","actualizarError","actualizarState","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuid","console","log","type","placeholder","onChange","Cita","eliminarCita","onClick","protTypes","PropTypes","object","isRequired","func","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","nuevasCitas","filter","titulo","length","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.5d098234.chunk.js","sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport uuid from 'uuid/v4';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst  Formulario = ({crearCita}) => {\r\n\r\n    // Crear State de Citas\r\n    const [cita, actualizarCita] = useState({\r\n        mascota: '',\r\n        propietario: '',\r\n        fecha: '',\r\n        hora: '',\r\n        sintomas: ''\r\n    }); \r\n    const [ error, actualizarError ] = useState(false)\r\n\r\n    // funcion que se ejecuta cada que el usuario escribe en un input\r\n    const actualizarState = e => {\r\n        actualizarCita({\r\n            ...cita,\r\n            [e.target.name]: e.target.value\r\n        })\r\n\r\n    }\r\n        // extraer los valores\r\n    const { mascota,  propietario, fecha, hora, sintomas } = cita;    \r\n    \r\n\r\n    // Cuamdo el usuario presion agregar cita \r\n    const submitCita = e => {\r\n        e.preventDefault();\r\n\r\n    // Validar\r\n         if( mascota.trim() === '' || propietario.trim() === '' || fecha.trim() === '' ||\r\n          hora.trim() === '' || sintomas.trim() === ''){\r\n              actualizarError(true)\r\n              return;   \r\n          } \r\n\r\n     // Eliminar el mensaje previo\r\n        actualizarError(false);     \r\n\r\n\r\n        //asignar un ID\r\n        cita.id = uuid(); \r\n        console.log(cita);\r\n\r\n        // Crear la cita\r\n        crearCita(cita);\r\n\r\n        // Reiniciar el Form\r\n          actualizarCita({\r\n            mascota: '',\r\n            propietario: '',\r\n            fecha: '',\r\n            hora: '',\r\n            sintomas: ''\r\n\r\n          })\r\n        \r\n    }\r\n\r\n    return ( \r\n        <Fragment>\r\n        <h2>Crear Citas</h2>\r\n\r\n        {error ? <p className=\"alerta-error\">Todos los campos son obligatoorios</p> : null}\r\n        <form\r\n            onSubmit={submitCita}\r\n        >\r\n            <label>Nombre de la Mascota</label>\r\n            <input\r\n                type=\"text\"\r\n                name=\"mascota\"\r\n                className=\"u-full-width\"\r\n                placeholder=\"Nombre de la Mascota\"\r\n                onChange={actualizarState}\r\n                value={mascota}\r\n             />   \r\n            <label>Nombre del Dueño</label>\r\n            <input\r\n                type=\"text\"\r\n                name=\"propietario\"\r\n                className=\"u-full-width\"\r\n                placeholder=\"Nombre del Dueño\"\r\n                onChange={actualizarState}\r\n                value={propietario} \r\n            />\r\n            <label>Fecha</label>\r\n            <input\r\n                type=\"date\"\r\n                name=\"fecha\"\r\n                className=\"u-full-width\"\r\n                onChange={actualizarState}\r\n                value={fecha}\r\n            />\r\n            <label>Hora</label>\r\n            <input\r\n                type=\"time\"\r\n                name=\"hora\"\r\n                className=\"u-full-width\"  \r\n                onChange={actualizarState}\r\n                value={hora}          \r\n            />\r\n            <label>Sintomas</label>\r\n            <textarea\r\n                className=\"u-full-width\"\r\n                name=\"sintomas\"\r\n                onChange={actualizarState}\r\n                value={sintomas}\r\n            ></textarea>\r\n            <button\r\n                type=\"submit\"\r\n                className=\"u-full-width button-primary\"\r\n            >Agregar cita</button>\r\n            \r\n        </form>\r\n\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nFormulario.propTypes = { \r\n    crearCita: PropTypes.func.isRequired\r\n}\r\n \r\nexport default  Formulario; \r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Cita = ({cita, eliminarCita}) => (\r\n    <div className=\"cita\">\r\n        <p>Mascota: <span>{cita.mascota}</span></p>\r\n        <p>Dueño: <span>{cita.propietario}</span></p>\r\n        <p>Fecha: <span>{cita.fecha}</span></p>\r\n        <p>Hora: <span>{cita.hora}</span></p>\r\n        <p>Sintomas: <span>{cita.sintomas}</span></p>\r\n\r\n        <button\r\n            className=\"button eliminar u-full width\"\r\n            onClick={ () => eliminarCita(cita.id) }\r\n\r\n        \r\n        >Eliminar &times;</button>\r\n    </div>\r\n);\r\n\r\nCita.protTypes = {\r\n    cita: PropTypes.object.isRequired,\r\n    eliminarCita: PropTypes.func.isRequired\r\n}\r\n\r\n\r\n export default Cita;","import React, { Fragment, useState, useEffect } from 'react';\nimport Formulario from './Components/Formulario';\nimport Cita from './Components/Cita';\n\nfunction App() {\n\n  // citas en local storag\n  let citasIniciales = JSON.parse (localStorage.getItem('citas'));\n  if(!citasIniciales) {\n    citasIniciales = [];\n  }\n\n// Arreglo decitas \n  const [citas, guardarCitas] = useState(citasIniciales);\n\n  // use Effect para realizar ciertas operaciones cuando el state cambia \n  useEffect( () => {\n    let citasIniciales = JSON.parse (localStorage.getItem('citas'));\n    if(citasIniciales) {\n    localStorage.setItem('citas', JSON.stringify(citas))\n  } else {\n    localStorage.setItem('citas', JSON.stringify([]));\n  }\n}, [citas,] );\n\n// Funcion que tome las citas actualkes y tome la nueva \nconst crearCita = cita => {\n  guardarCitas([\n    ...citas, cita ]);\n}\n// Funcion que elimina cita por su id\nconst eliminarCita = id => {\n  const nuevasCitas = citas.filter(cita => cita.id !== id );\n  guardarCitas(nuevasCitas);\n}\n// Mensaje condicional\nconst titulo = citas.length === 0 ? 'No hay Citas' : 'Administra tus Citas';\n\n  return (\n    <Fragment>\n      <h1>Administrador de Pacientes</h1>\n\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Formulario \n            crearCita={crearCita}\n            />\n          </div>\n          <div className=\"one-half column\">\n            <h2>{titulo}</h2>\n            {citas.map(cita => (\n              <Cita \n                key={cita.id}\n                cita={cita}\n                eliminarCita={eliminarCita}\n              />\n              ))}\n          </div>\n\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}